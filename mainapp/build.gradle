group 'org.ams.repstats'
version '0.1'

apply plugin: 'application'

mainClassName = 'org.ams.repstats.MainApp'

dependencies {
    compile project(':gitwrapper')
    compile project(':svnwrapper')
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.jfree:jfreechart:1.0.19'

}

jar {
    manifest {
        attributes(
                'Manifest-Version': version,
                'Main-Class': mainClassName,
                'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Build-Time': new Date(),
        )
    }
}

gradle.taskGraph.whenReady { graph ->
    // Make a fat JAR, unless we're doing `distTar` or `distZip`
    if (graph.hasTask(jar) && !graph.hasTask(startScripts)) {
        jar {
            from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
    manifest {
        attributes(
                'Manifest-Version': version,
                'Main-Class': mainClassName,
                'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Build-Time': new Date(),
        )
    }
}